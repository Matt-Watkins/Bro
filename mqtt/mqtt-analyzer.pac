# Generated by binpac_quickstart

refine flow MQTT_Flow += {
	function proc_mqtt_message(msg: MQTT_PDU): bool
		%{
		printf("Entered MQTT_flow\n");
		unsigned int header1 = ${msg.fixed_header1};
		printf("Fixed_header1 : %d\n", header1);
		unsigned int header2 = ${msg.fixed_header2};
		printf("Fixed_header1 : %d\n", header2);
		unsigned int msg_type = ${msg.msg_type};
		printf("Message Type : %d\n", msg_type);
//#  		if (msg_type == MQTT_CONNECTION) {
//#			printf("MQTT_CONN packet\n");
//#			BifEvent::generate_mqtt_conn(connection()->bro_analyzer(), connection()->bro_analyzer()->Conn(), ${msg.msg_type});
//#			return true;
//#		}
//#		if (${msg.msg_type} == MQTT_CONNACK) {
//#			printf("MQTT_CONNACK packet\n");
//#			BifEvent::generate_mqtt_connack(connection()->bro_analyzer(), connection()->bro_analyzer()->Conn(),${msg.msg_type});
//#			return true;
//#		}
//#		if (${msg.msg_type} == MQTT_PUBLISH) {
//#			printf("MQTT_PUBLISH packet\n");
//#			BifEvent::generate_mqtt_pub(connection()->bro_analyzer(), connection()->bro_analyzer()->Conn(),${msg.msg_type});
//#			return true;
//#		}
//#		if (${msg.msg_type} == MQTT_SUBSCRIBE) {
//#			printf("MQTT_SUBSCRIBE packet\n");
//#			BifEvent::generate_mqtt_sub(connection()->bro_analyzer(), connection()->bro_analyzer()->Conn(),${msg.msg_type});
//#			return true;
//#		}
//#		if (${msg.msg_type} == MQTT_SUBACK) {
//#			printf("MQTT_SUBACK packet\n");
//#			BifEvent::generate_mqtt_suback(connection()->bro_analyzer(), connection()->bro_analyzer()->Conn(),${msg.msg_type});
//#			return true;
//#		}
//#		if (${msg.msg_type} == MQTT_PINGREQ) {
//#			printf("MQTT_PINGREQ packet\n");
//#			BifEvent::generate_mqtt_pingreq(connection()->bro_analyzer(), connection()->bro_analyzer()->Conn(),${msg.msg_type});
//#			return true;
//#		}
//#		if (${msg.msg_type} == MQTT_PINGRES) {
//#			printf("MQTT_PINGRES packet\n");
//#			BifEvent::generate_mqtt_pingres(connection()->bro_analyzer(), connection()->bro_analyzer()->Conn(),${msg.msg_type});
//#			return true;
//#		}
		%}
};

enum MQTT_msg_type {
        MQTT_CONNECTION = 1,
        MQTT_CONNACK = 2,
        MQTT_PUBLISH = 3,
        MQTT_SUBSCRIBE = 8,
        MQTT_SUBACK = 9,
        MQTT_PINGREQ = 12,
        MQTT_PINGRES = 13,
};

#enum MQTT_msg_type {
#        MQTT_CONNECTION = 0x24,
#        MQTT_CONNACK = 0x28,
#        MQTT_PUBLISH = 0x30,
#        MQTT_SUBSCRIBE = 0x82,
#        MQTT_SUBACK = 0x90,
#        MQTT_PINGREQ = 0xc0,
#        MQTT_PINGRES = 0xd0,
#};

#refine typeattr MQTT_PDU += &let {
#	proc: bool = $context.flow.proc_mqtt_message(is_orig, fixed_header1, fixed_header2);
#};

refine typeattr MQTT_PDU += &let {
	proc: bool = $context.flow.proc_mqtt_message(this);
};
